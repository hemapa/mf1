"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = startServer;
exports.setError = setError;
exports.notifyServer = notifyServer;
exports.reloadBrowser = reloadBrowser;
exports.reloadShell = reloadShell;
const tslib_1 = require("tslib");
const browserSync = tslib_1.__importStar(require("browser-sync"));
const path_1 = require("path");
const mrmime_1 = require("mrmime");
const updateIndexHtml_1 = require("./updateIndexHtml");
let server;
function startServer(options, path, memResults) {
    const projectName = options.target.split(':')[0];
    server = browserSync.create(projectName);
    server.init({
        port: options.port || 4200,
        cors: true,
        server: path,
        notify: false,
        single: true,
        ui: false,
        open: options.open,
        middleware: [
            function (req, res, next) {
                const temp = req.url.startsWith('/') ? req.url.substring(1) : req.url;
                const key = temp.indexOf('?') > -1 ? temp.substring(0, temp.indexOf('?')) : temp;
                const result = memResults.get(key);
                if (result) {
                    const mimeType = (0, mrmime_1.lookup)((0, path_1.extname)(key)) || 'text/javascript';
                    const body = getBody(result, memResults, options);
                    res.writeHead(200, {
                        'Content-Type': mimeType,
                    });
                    res.end(body);
                }
                else {
                    next();
                }
            },
        ],
    });
}
let buildError = '';
function setError(error) {
    buildError = error;
}
function notifyServer(message) {
    server.notify(message);
}
function reloadBrowser() {
    if (!server) {
        throw new Error('server is not started');
    }
    server.reload();
}
function reloadShell(shellProjectName) {
    if (!server) {
        throw new Error('server is not started');
    }
    if (!shellProjectName) {
        return;
    }
    if (browserSync.has(shellProjectName)) {
        const shellServer = browserSync.get(shellProjectName);
        shellServer.reload();
    }
}
function modifyIndexHtml(content, fileNames, nfOptions) {
    if (buildError) {
        const errorHtml = `
    <div style="position: absolute; filter: opacity(80%); top:0; bottom:0; left:0; right:0; padding:20px; background-color:black; color:white; ">
      <h2>${buildError}</h2>
    </div>
  `;
        content = errorHtml + content;
    }
    const mainName = fileNames.find((f) => f.startsWith('main.') && f.endsWith('.js'));
    const polyfillsName = fileNames.find((f) => f.startsWith('polyfills.') && f.endsWith('.js'));
    const index = (0, updateIndexHtml_1.updateScriptTags)(content, mainName, polyfillsName, nfOptions);
    return index;
}
function getBody(result, memResults, nfOptions) {
    const body = result.get();
    if (result.fileName === 'index.html') {
        const content = new TextDecoder().decode(body);
        return modifyIndexHtml(content, memResults.getFileNames(), nfOptions);
    }
    else {
        return body;
    }
}
//# sourceMappingURL=dev-server.js.map