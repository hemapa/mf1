import { mergeImportMaps, } from './model/import-map';
import { getExternalUrl, setExternalUrl } from './model/externals';
import { getDirectory, joinPaths } from './utils/path-utils';
import { addRemote } from './model/remotes';
import { appendImportMap } from './utils/add-import-map';
/**
 * Initialize the federation runtime
 * @param remotesOrManifestUrl
 * @param options The cacheTag allows you to invalidate the cache of the remoteEntry.json files, pass a new value with every release (f.ex. the version number)
 */
export async function initFederation(remotesOrManifestUrl = {}, options) {
    const cacheOption = options?.cacheTag ? `?t=${options.cacheTag}` : '';
    const remotes = typeof remotesOrManifestUrl === 'string'
        ? await loadManifest(remotesOrManifestUrl + cacheOption)
        : remotesOrManifestUrl;
    const url = './remoteEntry.json' + cacheOption;
    const hostInfo = await loadFederationInfo(url);
    const hostImportMap = await processHostInfo(hostInfo);
    const remotesImportMap = await processRemoteInfos(remotes, {
        throwIfRemoteNotFound: false,
        ...options,
    });
    const importMap = mergeImportMaps(hostImportMap, remotesImportMap);
    appendImportMap(importMap);
    return importMap;
}
async function loadManifest(remotes) {
    return (await fetch(remotes).then((r) => r.json()));
}
export async function processRemoteInfos(remotes, options = { throwIfRemoteNotFound: false }) {
    const processRemoteInfoPromises = Object.keys(remotes).map(async (remoteName) => {
        try {
            let url = remotes[remoteName];
            if (options.cacheTag) {
                const addAppend = remotes[remoteName].includes('?') ? '&' : '?';
                url += `${addAppend}t=${options.cacheTag}`;
            }
            return await processRemoteInfo(url, remoteName);
        }
        catch (e) {
            const error = `Error loading remote entry for ${remoteName} from file ${remotes[remoteName]}`;
            if (options.throwIfRemoteNotFound) {
                throw new Error(error);
            }
            console.error(error);
            return null;
        }
    });
    const remoteImportMaps = await Promise.all(processRemoteInfoPromises);
    const importMap = remoteImportMaps.reduce((acc, remoteImportMap) => remoteImportMap ? mergeImportMaps(acc, remoteImportMap) : acc, { imports: {}, scopes: {} });
    return importMap;
}
export async function processRemoteInfo(federationInfoUrl, remoteName) {
    const baseUrl = getDirectory(federationInfoUrl);
    const remoteInfo = await loadFederationInfo(federationInfoUrl);
    if (!remoteName) {
        remoteName = remoteInfo.name;
    }
    const importMap = createRemoteImportMap(remoteInfo, remoteName, baseUrl);
    addRemote(remoteName, { ...remoteInfo, baseUrl });
    return importMap;
}
function createRemoteImportMap(remoteInfo, remoteName, baseUrl) {
    const imports = processExposed(remoteInfo, remoteName, baseUrl);
    const scopes = processRemoteImports(remoteInfo, baseUrl);
    return { imports, scopes };
}
async function loadFederationInfo(url) {
    const info = (await fetch(url).then((r) => r.json()));
    return info;
}
function processRemoteImports(remoteInfo, baseUrl) {
    const scopes = {};
    const scopedImports = {};
    for (const shared of remoteInfo.shared) {
        const outFileName = getExternalUrl(shared) ?? joinPaths(baseUrl, shared.outFileName);
        setExternalUrl(shared, outFileName);
        scopedImports[shared.packageName] = outFileName;
    }
    scopes[baseUrl + '/'] = scopedImports;
    return scopes;
}
function processExposed(remoteInfo, remoteName, baseUrl) {
    const imports = {};
    for (const exposed of remoteInfo.exposes) {
        const key = joinPaths(remoteName, exposed.key);
        const value = joinPaths(baseUrl, exposed.outFileName);
        imports[key] = value;
    }
    return imports;
}
export async function processHostInfo(hostInfo, relBundlesPath = './') {
    const imports = hostInfo.shared.reduce((acc, cur) => ({
        ...acc,
        [cur.packageName]: relBundlesPath + cur.outFileName,
    }), {});
    for (const shared of hostInfo.shared) {
        setExternalUrl(shared, relBundlesPath + shared.outFileName);
    }
    return { imports, scopes: {} };
}
//# sourceMappingURL=data:application/json;base64,