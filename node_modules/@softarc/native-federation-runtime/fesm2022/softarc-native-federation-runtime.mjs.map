{"version":3,"file":"softarc-native-federation-runtime.mjs","sources":["../../../../libs/native-federation-runtime/src/lib/model/import-map.ts","../../../../libs/native-federation-runtime/src/lib/model/global-cache.ts","../../../../libs/native-federation-runtime/src/lib/model/externals.ts","../../../../libs/native-federation-runtime/src/lib/utils/path-utils.ts","../../../../libs/native-federation-runtime/src/lib/model/remotes.ts","../../../../libs/native-federation-runtime/src/lib/utils/add-import-map.ts","../../../../libs/native-federation-runtime/src/lib/init-federation.ts","../../../../libs/native-federation-runtime/src/lib/load-remote-module.ts","../../../../libs/native-federation-runtime/src/lib/get-shared.ts","../../../../libs/native-federation-runtime/src/softarc-native-federation-runtime.ts"],"sourcesContent":["export type Imports = Record<string, string>;\n\nexport type Scopes = Record<string, Imports>;\n\nexport type ImportMap = {\n  imports: Imports;\n  scopes: Scopes;\n};\n\nexport function mergeImportMaps(map1: ImportMap, map2: ImportMap): ImportMap {\n  return {\n    imports: { ...map1.imports, ...map2.imports },\n    scopes: { ...map1.scopes, ...map2.scopes },\n  };\n}\n","import { Remote } from './remotes';\n\nexport const nfNamespace = '__NATIVE_FEDERATION__';\n\nexport type NfCache = {\n  externals: Map<string, string>;\n  remoteNamesToRemote: Map<string, Remote>;\n  baseUrlToRemoteNames: Map<string, string>;\n};\n\nexport type Global = {\n  [nfNamespace]: NfCache;\n};\n\nconst global = globalThis as unknown as Global;\n\nglobal[nfNamespace] ??= {\n  externals: new Map<string, string>(),\n  remoteNamesToRemote: new Map<string, Remote>(),\n  baseUrlToRemoteNames: new Map<string, string>(),\n};\n\nexport const globalCache = global[nfNamespace];\n","import { SharedInfo } from './federation-info';\nimport { globalCache } from './global-cache';\n\nconst externals = globalCache.externals;\n\nfunction getExternalKey(shared: SharedInfo) {\n  return `${shared.packageName}@${shared.version}`;\n}\n\nexport function getExternalUrl(shared: SharedInfo): string | undefined {\n  const packageKey = getExternalKey(shared);\n  return externals.get(packageKey);\n}\n\nexport function setExternalUrl(shared: SharedInfo, url: string): void {\n  const packageKey = getExternalKey(shared);\n  externals.set(packageKey, url);\n}\n","export function getDirectory(url: string) {\n  const parts = url.split('/');\n  parts.pop();\n  return parts.join('/');\n}\n\nexport function joinPaths(path1: string, path2: string): string {\n  while (path1.endsWith('/')) {\n    path1 = path1.substring(0, path1.length - 1);\n  }\n  if (path2.startsWith('./')) {\n    path2 = path2.substring(2, path2.length);\n  }\n\n  return `${path1}/${path2}`;\n}\n","import { FederationInfo } from './federation-info';\nimport { globalCache } from './global-cache';\n\nexport type Remote = FederationInfo & {\n  baseUrl: string;\n};\n\nconst remoteNamesToRemote = globalCache.remoteNamesToRemote;\nconst baseUrlToRemoteNames = globalCache.baseUrlToRemoteNames;\n\nexport function addRemote(remoteName: string, remote: Remote): void {\n  remoteNamesToRemote.set(remoteName, remote);\n  baseUrlToRemoteNames.set(remote.baseUrl, remoteName);\n}\n\nexport function getRemoteNameByBaseUrl(baseUrl: string): string | undefined {\n  return baseUrlToRemoteNames.get(baseUrl);\n}\n\nexport function isRemoteInitialized(baseUrl: string): boolean {\n  return baseUrlToRemoteNames.has(baseUrl);\n}\n\nexport function getRemote(remoteName: string): Remote | undefined {\n  return remoteNamesToRemote.get(remoteName);\n}\n\nexport function hasRemote(remoteName: string): boolean {\n  return remoteNamesToRemote.has(remoteName);\n}\n","import { ImportMap } from '../model/import-map';\n\nexport function appendImportMap(importMap: ImportMap) {\n  document.head.appendChild(\n    Object.assign(document.createElement('script'), {\n      type: 'importmap-shim',\n      innerHTML: JSON.stringify(importMap),\n    })\n  );\n}\n","import {\n  ImportMap,\n  Imports,\n  mergeImportMaps,\n  Scopes,\n} from './model/import-map';\nimport { getExternalUrl, setExternalUrl } from './model/externals';\nimport { getDirectory, joinPaths } from './utils/path-utils';\nimport { addRemote } from './model/remotes';\nimport { appendImportMap } from './utils/add-import-map';\nimport {\n  FederationInfo,\n  InitFederationOptions,\n  ProcessRemoteInfoOptions,\n} from './model/federation-info';\n\n/**\n * Initialize the federation runtime\n * @param remotesOrManifestUrl\n * @param options The cacheTag allows you to invalidate the cache of the remoteEntry.json files, pass a new value with every release (f.ex. the version number)\n */\nexport async function initFederation(\n  remotesOrManifestUrl: Record<string, string> | string = {},\n  options?: InitFederationOptions\n): Promise<ImportMap> {\n  const cacheOption = options?.cacheTag ? `?t=${options.cacheTag}` : '';\n  const remotes =\n    typeof remotesOrManifestUrl === 'string'\n      ? await loadManifest(remotesOrManifestUrl + cacheOption)\n      : remotesOrManifestUrl;\n\n  const url = './remoteEntry.json' + cacheOption;\n  const hostInfo = await loadFederationInfo(url);\n  const hostImportMap = await processHostInfo(hostInfo);\n  const remotesImportMap = await processRemoteInfos(remotes, {\n    throwIfRemoteNotFound: false,\n    ...options,\n  });\n\n  const importMap = mergeImportMaps(hostImportMap, remotesImportMap);\n  appendImportMap(importMap);\n\n  return importMap;\n}\n\nasync function loadManifest(remotes: string): Promise<Record<string, string>> {\n  return (await fetch(remotes).then((r) => r.json())) as Record<string, string>;\n}\n\nexport async function processRemoteInfos(\n  remotes: Record<string, string>,\n  options: ProcessRemoteInfoOptions = { throwIfRemoteNotFound: false }\n): Promise<ImportMap> {\n  const processRemoteInfoPromises = Object.keys(remotes).map(\n    async (remoteName) => {\n      try {\n        let url = remotes[remoteName];\n        if (options.cacheTag) {\n          const addAppend = remotes[remoteName].includes('?') ? '&' : '?';\n          url += `${addAppend}t=${options.cacheTag}`;\n        }\n\n        return await processRemoteInfo(url, remoteName);\n      } catch (e) {\n        const error = `Error loading remote entry for ${remoteName} from file ${remotes[remoteName]}`;\n\n        if (options.throwIfRemoteNotFound) {\n          throw new Error(error);\n        }\n\n        console.error(error);\n        return null;\n      }\n    }\n  );\n\n  const remoteImportMaps = await Promise.all(processRemoteInfoPromises);\n\n  const importMap = remoteImportMaps.reduce<ImportMap>(\n    (acc, remoteImportMap) =>\n      remoteImportMap ? mergeImportMaps(acc, remoteImportMap) : acc,\n    { imports: {}, scopes: {} }\n  );\n\n  return importMap;\n}\n\nexport async function processRemoteInfo(\n  federationInfoUrl: string,\n  remoteName?: string\n): Promise<ImportMap> {\n  const baseUrl = getDirectory(federationInfoUrl);\n  const remoteInfo = await loadFederationInfo(federationInfoUrl);\n\n  if (!remoteName) {\n    remoteName = remoteInfo.name;\n  }\n\n  const importMap = createRemoteImportMap(remoteInfo, remoteName, baseUrl);\n  addRemote(remoteName, { ...remoteInfo, baseUrl });\n\n  return importMap;\n}\n\nfunction createRemoteImportMap(\n  remoteInfo: FederationInfo,\n  remoteName: string,\n  baseUrl: string\n): ImportMap {\n  const imports = processExposed(remoteInfo, remoteName, baseUrl);\n  const scopes = processRemoteImports(remoteInfo, baseUrl);\n  return { imports, scopes };\n}\n\nasync function loadFederationInfo(url: string): Promise<FederationInfo> {\n  const info = (await fetch(url).then((r) => r.json())) as FederationInfo;\n  return info;\n}\n\nfunction processRemoteImports(\n  remoteInfo: FederationInfo,\n  baseUrl: string\n): Scopes {\n  const scopes: Scopes = {};\n  const scopedImports: Imports = {};\n\n  for (const shared of remoteInfo.shared) {\n    const outFileName =\n      getExternalUrl(shared) ?? joinPaths(baseUrl, shared.outFileName);\n    setExternalUrl(shared, outFileName);\n    scopedImports[shared.packageName] = outFileName;\n  }\n\n  scopes[baseUrl + '/'] = scopedImports;\n  return scopes;\n}\n\nfunction processExposed(\n  remoteInfo: FederationInfo,\n  remoteName: string,\n  baseUrl: string\n): Imports {\n  const imports: Imports = {};\n\n  for (const exposed of remoteInfo.exposes) {\n    const key = joinPaths(remoteName, exposed.key);\n    const value = joinPaths(baseUrl, exposed.outFileName);\n    imports[key] = value;\n  }\n\n  return imports;\n}\n\nexport async function processHostInfo(\n  hostInfo: FederationInfo,\n  relBundlesPath = './'\n): Promise<ImportMap> {\n  const imports = hostInfo.shared.reduce(\n    (acc, cur) => ({\n      ...acc,\n      [cur.packageName]: relBundlesPath + cur.outFileName,\n    }),\n    {}\n  ) as Imports;\n\n  for (const shared of hostInfo.shared) {\n    setExternalUrl(shared, relBundlesPath + shared.outFileName);\n  }\n  return { imports, scopes: {} };\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { appendImportMap } from './utils/add-import-map';\nimport { processRemoteInfo } from './init-federation';\nimport {\n  getRemote,\n  getRemoteNameByBaseUrl,\n  isRemoteInitialized,\n} from './model/remotes';\nimport { getDirectory, joinPaths } from './utils/path-utils';\n\ndeclare function importShim<T>(url: string): T;\n\nexport type LoadRemoteModuleOptions<T = any> = {\n  remoteEntry?: string;\n  remoteName?: string;\n  exposedModule: string;\n  fallback?: T;\n};\n\nexport async function loadRemoteModule<T = any>(\n  options: LoadRemoteModuleOptions\n): Promise<T>;\nexport async function loadRemoteModule<T = any>(\n  remoteName: string,\n  exposedModule: string\n): Promise<T>;\nexport async function loadRemoteModule<T = any>(\n  optionsOrRemoteName: LoadRemoteModuleOptions<T> | string,\n  exposedModule?: string\n): Promise<T> {\n  const options = normalizeOptions(optionsOrRemoteName, exposedModule);\n\n  await ensureRemoteInitialized(options);\n\n  const remoteName = getRemoteNameByOptions(options);\n  const remote = getRemote(remoteName);\n  const fallback = options.fallback;\n\n  const remoteError = !remote ? 'unknown remote ' + remoteName : '';\n\n  if (!remote && !fallback) {\n    throw new Error(remoteError);\n  } else if (!remote) {\n    logClientError(remoteError);\n    return Promise.resolve(fallback);\n  }\n\n  const exposed = remote.exposes.find((e) => e.key === options.exposedModule);\n\n  const exposedError = !exposed\n    ? `Unknown exposed module ${options.exposedModule} in remote ${remoteName}`\n    : '';\n\n  if (!exposed && !fallback) {\n    throw new Error(exposedError);\n  } else if (!exposed) {\n    logClientError(exposedError);\n    return Promise.resolve(fallback);\n  }\n\n  const url = joinPaths(remote.baseUrl, exposed.outFileName);\n\n  try {\n    const module = _import<T>(url);\n    return module;\n  } catch (e) {\n    if (fallback) {\n      console.error('error loading remote module', e);\n      return fallback;\n    }\n    throw e;\n  }\n}\n\nfunction _import<T = any>(url: string) {\n  return typeof importShim !== 'undefined'\n    ? importShim<T>(url)\n    : (import(/* @vite-ignore */ url) as T);\n}\n\nfunction getRemoteNameByOptions(options: LoadRemoteModuleOptions) {\n  let remoteName;\n\n  if (options.remoteName) {\n    remoteName = options.remoteName;\n  } else if (options.remoteEntry) {\n    const baseUrl = getDirectory(options.remoteEntry);\n    remoteName = getRemoteNameByBaseUrl(baseUrl);\n  } else {\n    throw new Error(\n      'unexpcted arguments: Please pass remoteName or remoteEntry'\n    );\n  }\n\n  if (!remoteName) {\n    throw new Error('unknown remoteName ' + remoteName);\n  }\n  return remoteName;\n}\n\nasync function ensureRemoteInitialized(\n  options: LoadRemoteModuleOptions\n): Promise<void> {\n  if (\n    options.remoteEntry &&\n    !isRemoteInitialized(getDirectory(options.remoteEntry))\n  ) {\n    const importMap = await processRemoteInfo(options.remoteEntry);\n    appendImportMap(importMap);\n  }\n}\n\nfunction normalizeOptions(\n  optionsOrRemoteName: string | LoadRemoteModuleOptions,\n  exposedModule: string | undefined\n): LoadRemoteModuleOptions {\n  let options: LoadRemoteModuleOptions;\n\n  if (typeof optionsOrRemoteName === 'string' && exposedModule) {\n    options = {\n      remoteName: optionsOrRemoteName,\n      exposedModule,\n    };\n  } else if (typeof optionsOrRemoteName === 'object' && !exposedModule) {\n    options = optionsOrRemoteName;\n  } else {\n    throw new Error(\n      'unexpected arguments: please pass options or a remoteName/exposedModule-pair'\n    );\n  }\n  return options;\n}\n\nfunction logClientError(error: string): void {\n  if (typeof window !== 'undefined') {\n    console.error(error);\n  }\n}\n","type Type<T> = new () => T;\n\ntype NativeFederationContainer = {\n  __NATIVE_FEDERATION__: {\n    baseUrlToRemoteNames: Map<string, string>;\n    externals: Map<string, string>;\n  };\n};\n\nexport type ShareObject = {\n  version: string;\n  scope?: string;\n  get: () => Promise<() => Type<unknown>>;\n  shareConfig?: {\n    singleton?: boolean;\n    requiredVersion: string;\n  };\n};\n\nexport type ShareConfig = {\n  [pkgName: string]: Array<ShareObject>;\n};\n\nexport type ShareOptions = {\n  singleton: boolean;\n  requiredVersionPrefix: '^' | '~' | '>' | '>=' | '';\n};\n\nconst defaultShareOptions: ShareOptions = {\n  singleton: false,\n  requiredVersionPrefix: '',\n};\n\nexport function getShared(options = defaultShareOptions) {\n  const nfc = window as unknown as NativeFederationContainer;\n  const externals = nfc.__NATIVE_FEDERATION__.externals;\n  const shared: ShareConfig = {};\n\n  const allKeys = [...externals.keys()];\n  const keys = allKeys\n    .filter(\n      (k) =>\n        !k.startsWith('/@id/') &&\n        !k.startsWith('@angular-architects/module-federation') &&\n        !k.endsWith('@')\n    )\n    .sort();\n\n  for (const key of keys) {\n    const idx = key.lastIndexOf('@');\n    const pkgName = key.substring(0, idx);\n    const version = key.substring(idx + 1);\n    const path = externals.get(key) ?? '';\n\n    const shareObj: ShareObject = {\n      version,\n      get: async () => {\n        const lib = await (window as any).importShim(path);\n        return () => lib;\n      },\n      shareConfig: {\n        singleton: options.singleton,\n        requiredVersion: options.requiredVersionPrefix + version,\n      },\n    };\n\n    if (!shared[pkgName]) {\n      shared[pkgName] = [];\n    }\n\n    shared[pkgName].push(shareObj);\n  }\n  return shared;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}